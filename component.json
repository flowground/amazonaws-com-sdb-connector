{
    "title": "Amazon SimpleDB",
    "description": "Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>",
    "docsUrl": "https://docs.aws.amazon.com/sdb/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/sdb/2009-04-15/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://sdb.amazonaws.com/",
                    "http://sdb.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v2"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "BatchDeleteAttributes": {
            "main": "./lib/actions/BatchDeleteAttributes.js",
            "title": "BatchDeleteAttributes",
            "description": " Performs multiple DeleteAttributes operations in a single call, which reduces\nround trips and latencies. This enables Amazon SimpleDB to optimize requests,\nwhich generally yields better throughput. \n\n If you specify BatchDeleteAttributes without attributes or values, all the\nattributes for the item are deleted. \n\n BatchDeleteAttributes is an idempotent operation; running it multiple times on\nthe same item or attribute doesn't result in an error. \n\n The BatchDeleteAttributes operation succeeds or fails in its entirety. There\nare no partial deletes. You can execute multiple BatchDeleteAttributes\noperations and other operations in parallel. However, large numbers of\nconcurrent BatchDeleteAttributes calls can result in Service Unavailable (503)\nresponses. \n\n This operation is vulnerable to exceeding the maximum URL size when making a\nREST request using the HTTP GET method. \n\n This operation does not support conditions using Expected.X.Name,\nExpected.X.Value, or Expected.X.Exists. \n\n The following limitations are enforced for this operation:  * 1 MB request size\n * 25 item limit per\n   BatchDeleteAttributes operation",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/BatchDeleteAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "BatchPutAttributes": {
            "main": "./lib/actions/BatchPutAttributes.js",
            "title": "BatchPutAttributes",
            "description": " The BatchPutAttributes operation creates or replaces attributes within one or\nmore items. By using this operation, the client can perform multiple \nPutAttribute operation with a single call. This helps yield savings in round\ntrips and latencies, enabling Amazon SimpleDB to optimize requests and generally\nproduce better throughput. \n\n The client may specify the item name with the Item.X.ItemName parameter. The\nclient may specify new attributes using a combination of the \nItem.X.Attribute.Y.Name and Item.X.Attribute.Y.Value parameters. The client may\nspecify the first attribute for the first item using the parameters \nItem.0.Attribute.0.Name and Item.0.Attribute.0.Value, and for the second\nattribute for the first item by the parameters Item.0.Attribute.1.Name and \nItem.0.Attribute.1.Value, and so on. \n\n Attributes are uniquely identified within an item by their name/value\ncombination. For example, a single item can have the attributes { \"first_name\",\n\"first_value\" } and { \"first_name\", \"second_value\" }. However, it cannot have\ntwo attribute instances where both the Item.X.Attribute.Y.Name and \nItem.X.Attribute.Y.Value are the same. \n\n Optionally, the requester can supply the Replace parameter for each individual\nvalue. Setting this value to true will cause the new attribute values to replace\nthe existing attribute values. For example, if an item I has the attributes {\n'a', '1' }, { 'b', '2'} and { 'b', '3' } and the requester does a\nBatchPutAttributes of {'I', 'b', '4' } with the Replace parameter set to true,\nthe final attributes of the item will be { 'a', '1' } and { 'b', '4' },\nreplacing the previous values of the 'b' attribute with the new value. \n\nYou cannot specify an empty string as an item or as an attribute name. The \nBatchPutAttributes operation succeeds or fails in its entirety. There are no\npartial puts. This operation is vulnerable to exceeding the maximum URL size\nwhen making a REST request using the HTTP GET method. This operation does not\nsupport conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists\n.  You can execute multiple BatchPutAttributes operations and other operations in\nparallel. However, large numbers of concurrent BatchPutAttributes calls can\nresult in Service Unavailable (503) responses. \n\n The following limitations are enforced for this operation:  * 256 attribute\n   name-value pairs per item\n * 1 MB request size\n * 1 billion\n   attributes per domain\n * 10 GB of total\n   user data storage per domain\n * 25 item limit per BatchPutAttributes operation",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/BatchPutAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateDomain": {
            "main": "./lib/actions/CreateDomain.js",
            "title": "CreateDomain",
            "description": " The CreateDomain operation creates a new domain. The domain name should be\nunique among the domains associated with the Access Key ID provided in the\nrequest. The CreateDomain operation may take 10 or more seconds to complete. \n\nCreateDomain is an idempotent operation; running it multiple times using the\nsame domain name will not result in an error response.  The client can create up\nto 100 domains per account. \n\n If the client requires additional domains, go to \nhttp://aws.amazon.com/contact-us/simpledb-limit-request/\n[http://aws.amazon.com/contact-us/simpledb-limit-request/].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateDomain.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteAttributes": {
            "main": "./lib/actions/DeleteAttributes.js",
            "title": "DeleteAttributes",
            "description": " Deletes one or more attributes associated with an item. If all attributes of\nthe item are deleted, the item is deleted. \n\nIf DeleteAttributes is called without being passed any attributes or values\nspecified, all the attributes for the item are deleted.  DeleteAttributes is an idempotent operation; running it multiple times on the\nsame item or attribute does not result in an error response. \n\n Because Amazon SimpleDB makes multiple copies of item data and uses an eventual\nconsistency update model, performing a GetAttributes or Select operation (read)\nimmediately after a DeleteAttributes or PutAttributes operation (write) might\nnot return updated item data.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteDomain": {
            "main": "./lib/actions/DeleteDomain.js",
            "title": "DeleteDomain",
            "description": " The DeleteDomain operation deletes a domain. Any items (and their attributes)\nin the domain are deleted as well. The DeleteDomain operation might take 10 or\nmore seconds to complete. \n\nRunning DeleteDomain on a domain that does not exist or running the function\nmultiple times using the same domain name will not result in an error response.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteDomain.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DomainMetadata": {
            "main": "./lib/actions/DomainMetadata.js",
            "title": "DomainMetadata",
            "description": " Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DomainMetadata.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetAttributes": {
            "main": "./lib/actions/GetAttributes.js",
            "title": "GetAttributes",
            "description": " Returns all of the attributes associated with the specified item. Optionally,\nthe attributes returned can be limited to one or more attributes by specifying\nan attribute name parameter. \n\n If the item does not exist on the replica that was accessed for this operation,\nan empty set is returned. The system does not return an error as it cannot\nguarantee the item does not exist on other replicas. \n\nIf GetAttributes is called without being passed any attribute names, all the\nattributes for the item are returned.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListDomains": {
            "main": "./lib/actions/ListDomains.js",
            "title": "ListDomains",
            "description": " The <code>ListDomains</code> operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by <a href=\"#MaxNumberOfDomains\">MaxNumberOfDomains</a>. A <a href=\"#NextToken\">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code> domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code> provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain names with each successive operation call. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListDomains.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutAttributes": {
            "main": "./lib/actions/PutAttributes.js",
            "title": "PutAttributes",
            "description": " The PutAttributes operation creates or replaces attributes in an item. The\nclient may specify new attributes using a combination of the Attribute.X.Name \nand Attribute.X.Value parameters. The client specifies the first attribute by\nthe parameters Attribute.0.Name and Attribute.0.Value, the second attribute by\nthe parameters Attribute.1.Name and Attribute.1.Value, and so on. \n\n Attributes are uniquely identified in an item by their name/value combination.\nFor example, a single item can have the attributes { \"first_name\", \"first_value\"\n} and { \"first_name\", second_value\" }. However, it cannot have two attribute\ninstances where both the Attribute.X.Name and Attribute.X.Value are the same. \n\n Optionally, the requestor can supply the Replace parameter for each individual\nattribute. Setting this value to true causes the new attribute value to replace\nthe existing attribute value(s). For example, if an item has the attributes {\n'a', '1' }, { 'b', '2'} and { 'b', '3' } and the requestor calls PutAttributes \nusing the attributes { 'b', '4' } with the Replace parameter set to true, the\nfinal attributes of the item are changed to { 'a', '1' } and { 'b', '4' }, which\nreplaces the previous values of the 'b' attribute with the new value. \n\nUsing PutAttributes to replace attribute values that do not exist will not\nresult in an error response.  You cannot specify an empty string as an attribute\nname. \n\n Because Amazon SimpleDB makes multiple copies of client data and uses an\neventual consistency update model, an immediate GetAttributes or Select \noperation (read) immediately after a PutAttributes or DeleteAttributes operation\n(write) might not return the updated data. \n\n The following limitations are enforced for this operation:  * 256 total\n   attribute name-value pairs per item\n * One billion\n   attributes per domain\n * 10 GB of total\n   user data storage per domain",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Select": {
            "main": "./lib/actions/Select.js",
            "title": "Select",
            "description": " The Select operation returns a set of attributes for ItemNames that match the\nselect expression. Select is similar to the standard SQL SELECT statement. \n\n The total size of the response cannot exceed 1 MB in total size. Amazon\nSimpleDB automatically adjusts the number of items returned per page to enforce\nthis limit. For example, if the client asks to retrieve 2500 items, but each\nindividual item is 10 kB in size, the system returns 100 items and an\nappropriate NextToken so the client can access the next page of results. \n\n For information on how to construct select expressions, see Using Select to\nCreate Amazon SimpleDB Queries in the Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Select.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}